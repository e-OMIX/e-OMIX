{
  "version": 3,
  "sources": ["../../../../../../node_modules/@angular/cdk/fesm2022/keycodes2.mjs", "../../../../../../node_modules/@angular/cdk/fesm2022/typeahead.mjs", "../../../../../../node_modules/@angular/cdk/fesm2022/coercion/private.mjs", "../../../../../../node_modules/@angular/cdk/fesm2022/tree-key-manager.mjs"],
  "sourcesContent": ["const MAC_ENTER = 3;\nconst BACKSPACE = 8;\nconst TAB = 9;\nconst NUM_CENTER = 12;\nconst ENTER = 13;\nconst SHIFT = 16;\nconst CONTROL = 17;\nconst ALT = 18;\nconst PAUSE = 19;\nconst CAPS_LOCK = 20;\nconst ESCAPE = 27;\nconst SPACE = 32;\nconst PAGE_UP = 33;\nconst PAGE_DOWN = 34;\nconst END = 35;\nconst HOME = 36;\nconst LEFT_ARROW = 37;\nconst UP_ARROW = 38;\nconst RIGHT_ARROW = 39;\nconst DOWN_ARROW = 40;\nconst PLUS_SIGN = 43;\nconst PRINT_SCREEN = 44;\nconst INSERT = 45;\nconst DELETE = 46;\nconst ZERO = 48;\nconst ONE = 49;\nconst TWO = 50;\nconst THREE = 51;\nconst FOUR = 52;\nconst FIVE = 53;\nconst SIX = 54;\nconst SEVEN = 55;\nconst EIGHT = 56;\nconst NINE = 57;\nconst FF_SEMICOLON = 59; // Firefox (Gecko) fires this for semicolon instead of 186\nconst FF_EQUALS = 61; // Firefox (Gecko) fires this for equals instead of 187\nconst QUESTION_MARK = 63;\nconst AT_SIGN = 64;\nconst A = 65;\nconst B = 66;\nconst C = 67;\nconst D = 68;\nconst E = 69;\nconst F = 70;\nconst G = 71;\nconst H = 72;\nconst I = 73;\nconst J = 74;\nconst K = 75;\nconst L = 76;\nconst M = 77;\nconst N = 78;\nconst O = 79;\nconst P = 80;\nconst Q = 81;\nconst R = 82;\nconst S = 83;\nconst T = 84;\nconst U = 85;\nconst V = 86;\nconst W = 87;\nconst X = 88;\nconst Y = 89;\nconst Z = 90;\nconst META = 91; // WIN_KEY_LEFT\nconst MAC_WK_CMD_LEFT = 91;\nconst MAC_WK_CMD_RIGHT = 93;\nconst CONTEXT_MENU = 93;\nconst NUMPAD_ZERO = 96;\nconst NUMPAD_ONE = 97;\nconst NUMPAD_TWO = 98;\nconst NUMPAD_THREE = 99;\nconst NUMPAD_FOUR = 100;\nconst NUMPAD_FIVE = 101;\nconst NUMPAD_SIX = 102;\nconst NUMPAD_SEVEN = 103;\nconst NUMPAD_EIGHT = 104;\nconst NUMPAD_NINE = 105;\nconst NUMPAD_MULTIPLY = 106;\nconst NUMPAD_PLUS = 107;\nconst NUMPAD_MINUS = 109;\nconst NUMPAD_PERIOD = 110;\nconst NUMPAD_DIVIDE = 111;\nconst F1 = 112;\nconst F2 = 113;\nconst F3 = 114;\nconst F4 = 115;\nconst F5 = 116;\nconst F6 = 117;\nconst F7 = 118;\nconst F8 = 119;\nconst F9 = 120;\nconst F10 = 121;\nconst F11 = 122;\nconst F12 = 123;\nconst NUM_LOCK = 144;\nconst SCROLL_LOCK = 145;\nconst FIRST_MEDIA = 166;\nconst FF_MINUS = 173;\nconst MUTE = 173; // Firefox (Gecko) fires 181 for MUTE\nconst VOLUME_DOWN = 174; // Firefox (Gecko) fires 182 for VOLUME_DOWN\nconst VOLUME_UP = 175; // Firefox (Gecko) fires 183 for VOLUME_UP\nconst FF_MUTE = 181;\nconst FF_VOLUME_DOWN = 182;\nconst LAST_MEDIA = 183;\nconst FF_VOLUME_UP = 183;\nconst SEMICOLON = 186; // Firefox (Gecko) fires 59 for SEMICOLON\nconst EQUALS = 187; // Firefox (Gecko) fires 61 for EQUALS\nconst COMMA = 188;\nconst DASH = 189; // Firefox (Gecko) fires 173 for DASH/MINUS\nconst PERIOD = 190;\nconst SLASH = 191;\nconst APOSTROPHE = 192;\nconst TILDE = 192;\nconst OPEN_SQUARE_BRACKET = 219;\nconst BACKSLASH = 220;\nconst CLOSE_SQUARE_BRACKET = 221;\nconst SINGLE_QUOTE = 222;\nconst MAC_META = 224;\n\nexport { A, ALT, APOSTROPHE, AT_SIGN, B, BACKSLASH, BACKSPACE, C, CAPS_LOCK, CLOSE_SQUARE_BRACKET, COMMA, CONTEXT_MENU, CONTROL, D, DASH, DELETE, DOWN_ARROW, E, EIGHT, END, ENTER, EQUALS, ESCAPE, F, F1, F10, F11, F12, F2, F3, F4, F5, F6, F7, F8, F9, FF_EQUALS, FF_MINUS, FF_MUTE, FF_SEMICOLON, FF_VOLUME_DOWN, FF_VOLUME_UP, FIRST_MEDIA, FIVE, FOUR, G, H, HOME, I, INSERT, J, K, L, LAST_MEDIA, LEFT_ARROW, M, MAC_ENTER, MAC_META, MAC_WK_CMD_LEFT, MAC_WK_CMD_RIGHT, META, MUTE, N, NINE, NUMPAD_DIVIDE, NUMPAD_EIGHT, NUMPAD_FIVE, NUMPAD_FOUR, NUMPAD_MINUS, NUMPAD_MULTIPLY, NUMPAD_NINE, NUMPAD_ONE, NUMPAD_PERIOD, NUMPAD_PLUS, NUMPAD_SEVEN, NUMPAD_SIX, NUMPAD_THREE, NUMPAD_TWO, NUMPAD_ZERO, NUM_CENTER, NUM_LOCK, O, ONE, OPEN_SQUARE_BRACKET, P, PAGE_DOWN, PAGE_UP, PAUSE, PERIOD, PLUS_SIGN, PRINT_SCREEN, Q, QUESTION_MARK, R, RIGHT_ARROW, S, SCROLL_LOCK, SEMICOLON, SEVEN, SHIFT, SINGLE_QUOTE, SIX, SLASH, SPACE, T, TAB, THREE, TILDE, TWO, U, UP_ARROW, V, VOLUME_DOWN, VOLUME_UP, W, X, Y, Z, ZERO };\n\n", "import { Subject } from 'rxjs';\nimport { tap, debounceTime, filter, map } from 'rxjs/operators';\nimport { A, Z, ZERO, NINE } from './keycodes2.mjs';\n\nconst DEFAULT_TYPEAHEAD_DEBOUNCE_INTERVAL_MS = 200;\n/**\n * Selects items based on keyboard inputs. Implements the typeahead functionality of\n * `role=\"listbox\"` or `role=\"tree\"` and other related roles.\n */\nclass Typeahead {\n    _letterKeyStream = new Subject();\n    _items = [];\n    _selectedItemIndex = -1;\n    /** Buffer for the letters that the user has pressed */\n    _pressedLetters = [];\n    _skipPredicateFn;\n    _selectedItem = new Subject();\n    selectedItem = this._selectedItem;\n    constructor(initialItems, config) {\n        const typeAheadInterval = typeof config?.debounceInterval === 'number'\n            ? config.debounceInterval\n            : DEFAULT_TYPEAHEAD_DEBOUNCE_INTERVAL_MS;\n        if (config?.skipPredicate) {\n            this._skipPredicateFn = config.skipPredicate;\n        }\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            initialItems.length &&\n            initialItems.some(item => typeof item.getLabel !== 'function')) {\n            throw new Error('KeyManager items in typeahead mode must implement the `getLabel` method.');\n        }\n        this.setItems(initialItems);\n        this._setupKeyHandler(typeAheadInterval);\n    }\n    destroy() {\n        this._pressedLetters = [];\n        this._letterKeyStream.complete();\n        this._selectedItem.complete();\n    }\n    setCurrentSelectedItemIndex(index) {\n        this._selectedItemIndex = index;\n    }\n    setItems(items) {\n        this._items = items;\n    }\n    handleKey(event) {\n        const keyCode = event.keyCode;\n        // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n        // otherwise fall back to resolving alphanumeric characters via the keyCode.\n        if (event.key && event.key.length === 1) {\n            this._letterKeyStream.next(event.key.toLocaleUpperCase());\n        }\n        else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n            this._letterKeyStream.next(String.fromCharCode(keyCode));\n        }\n    }\n    /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n    isTyping() {\n        return this._pressedLetters.length > 0;\n    }\n    /** Resets the currently stored sequence of typed letters. */\n    reset() {\n        this._pressedLetters = [];\n    }\n    _setupKeyHandler(typeAheadInterval) {\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n        // and convert those letters back into a string. Afterwards find the first item that starts\n        // with that string and select it.\n        this._letterKeyStream\n            .pipe(tap(letter => this._pressedLetters.push(letter)), debounceTime(typeAheadInterval), filter(() => this._pressedLetters.length > 0), map(() => this._pressedLetters.join('').toLocaleUpperCase()))\n            .subscribe(inputString => {\n            // Start at 1 because we want to start searching at the item immediately\n            // following the current active item.\n            for (let i = 1; i < this._items.length + 1; i++) {\n                const index = (this._selectedItemIndex + i) % this._items.length;\n                const item = this._items[index];\n                if (!this._skipPredicateFn?.(item) &&\n                    item.getLabel?.().toLocaleUpperCase().trim().indexOf(inputString) === 0) {\n                    this._selectedItem.next(item);\n                    break;\n                }\n            }\n            this._pressedLetters = [];\n        });\n    }\n}\n\nexport { Typeahead };\n\n", "import { isObservable, of } from 'rxjs';\n\n/**\n * Given either an Observable or non-Observable value, returns either the original\n * Observable, or wraps it in an Observable that emits the non-Observable value.\n */\nfunction coerceObservable(data) {\n    if (!isObservable(data)) {\n        return of(data);\n    }\n    return data;\n}\n\nexport { coerceObservable };\n\n", "import { QueryList, InjectionToken } from '@angular/core';\nimport { Subscription, isObservable, Subject, of } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { Typeahead } from './typeahead.mjs';\nimport { coerceObservable } from './coercion/private.mjs';\n\n/**\n * This class manages keyboard events for trees. If you pass it a QueryList or other list of tree\n * items, it will set the active item, focus, handle expansion and typeahead correctly when\n * keyboard events occur.\n */\nclass TreeKeyManager {\n    /** The index of the currently active (focused) item. */\n    _activeItemIndex = -1;\n    /** The currently active (focused) item. */\n    _activeItem = null;\n    /** Whether or not we activate the item when it's focused. */\n    _shouldActivationFollowFocus = false;\n    /**\n     * The orientation that the tree is laid out in. In `rtl` mode, the behavior of Left and\n     * Right arrow are switched.\n     */\n    _horizontalOrientation = 'ltr';\n    /**\n     * Predicate function that can be used to check whether an item should be skipped\n     * by the key manager.\n     *\n     * The default value for this doesn't skip any elements in order to keep tree items focusable\n     * when disabled. This aligns with ARIA guidelines:\n     * https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#focusabilityofdisabledcontrols.\n     */\n    _skipPredicateFn = (_item) => false;\n    /** Function to determine equivalent items. */\n    _trackByFn = (item) => item;\n    /** Synchronous cache of the items to manage. */\n    _items = [];\n    _typeahead;\n    _typeaheadSubscription = Subscription.EMPTY;\n    _hasInitialFocused = false;\n    _initializeFocus() {\n        if (this._hasInitialFocused || this._items.length === 0) {\n            return;\n        }\n        let activeIndex = 0;\n        for (let i = 0; i < this._items.length; i++) {\n            if (!this._skipPredicateFn(this._items[i]) && !this._isItemDisabled(this._items[i])) {\n                activeIndex = i;\n                break;\n            }\n        }\n        const activeItem = this._items[activeIndex];\n        // Use `makeFocusable` here, because we want the item to just be focusable, not actually\n        // capture the focus since the user isn't interacting with it. See #29628.\n        if (activeItem.makeFocusable) {\n            this._activeItem?.unfocus();\n            this._activeItemIndex = activeIndex;\n            this._activeItem = activeItem;\n            this._typeahead?.setCurrentSelectedItemIndex(activeIndex);\n            activeItem.makeFocusable();\n        }\n        else {\n            // Backwards compatibility for items that don't implement `makeFocusable`.\n            this.focusItem(activeIndex);\n        }\n        this._hasInitialFocused = true;\n    }\n    /**\n     *\n     * @param items List of TreeKeyManager options. Can be synchronous or asynchronous.\n     * @param config Optional configuration options. By default, use 'ltr' horizontal orientation. By\n     * default, do not skip any nodes. By default, key manager only calls `focus` method when items\n     * are focused and does not call `activate`. If `typeaheadDefaultInterval` is `true`, use a\n     * default interval of 200ms.\n     */\n    constructor(items, config) {\n        // We allow for the items to be an array or Observable because, in some cases, the consumer may\n        // not have access to a QueryList of the items they want to manage (e.g. when the\n        // items aren't being collected via `ViewChildren` or `ContentChildren`).\n        if (items instanceof QueryList) {\n            this._items = items.toArray();\n            items.changes.subscribe((newItems) => {\n                this._items = newItems.toArray();\n                this._typeahead?.setItems(this._items);\n                this._updateActiveItemIndex(this._items);\n                this._initializeFocus();\n            });\n        }\n        else if (isObservable(items)) {\n            items.subscribe(newItems => {\n                this._items = newItems;\n                this._typeahead?.setItems(newItems);\n                this._updateActiveItemIndex(newItems);\n                this._initializeFocus();\n            });\n        }\n        else {\n            this._items = items;\n            this._initializeFocus();\n        }\n        if (typeof config.shouldActivationFollowFocus === 'boolean') {\n            this._shouldActivationFollowFocus = config.shouldActivationFollowFocus;\n        }\n        if (config.horizontalOrientation) {\n            this._horizontalOrientation = config.horizontalOrientation;\n        }\n        if (config.skipPredicate) {\n            this._skipPredicateFn = config.skipPredicate;\n        }\n        if (config.trackBy) {\n            this._trackByFn = config.trackBy;\n        }\n        if (typeof config.typeAheadDebounceInterval !== 'undefined') {\n            this._setTypeAhead(config.typeAheadDebounceInterval);\n        }\n    }\n    /** Stream that emits any time the focused item changes. */\n    change = new Subject();\n    /** Cleans up the key manager. */\n    destroy() {\n        this._typeaheadSubscription.unsubscribe();\n        this._typeahead?.destroy();\n        this.change.complete();\n    }\n    /**\n     * Handles a keyboard event on the tree.\n     * @param event Keyboard event that represents the user interaction with the tree.\n     */\n    onKeydown(event) {\n        const key = event.key;\n        switch (key) {\n            case 'Tab':\n                // Return early here, in order to allow Tab to actually tab out of the tree\n                return;\n            case 'ArrowDown':\n                this._focusNextItem();\n                break;\n            case 'ArrowUp':\n                this._focusPreviousItem();\n                break;\n            case 'ArrowRight':\n                this._horizontalOrientation === 'rtl'\n                    ? this._collapseCurrentItem()\n                    : this._expandCurrentItem();\n                break;\n            case 'ArrowLeft':\n                this._horizontalOrientation === 'rtl'\n                    ? this._expandCurrentItem()\n                    : this._collapseCurrentItem();\n                break;\n            case 'Home':\n                this._focusFirstItem();\n                break;\n            case 'End':\n                this._focusLastItem();\n                break;\n            case 'Enter':\n            case ' ':\n                this._activateCurrentItem();\n                break;\n            default:\n                if (event.key === '*') {\n                    this._expandAllItemsAtCurrentItemLevel();\n                    break;\n                }\n                this._typeahead?.handleKey(event);\n                // Return here, in order to avoid preventing the default action of non-navigational\n                // keys or resetting the buffer of pressed letters.\n                return;\n        }\n        // Reset the typeahead since the user has used a navigational key.\n        this._typeahead?.reset();\n        event.preventDefault();\n    }\n    /** Index of the currently active item. */\n    getActiveItemIndex() {\n        return this._activeItemIndex;\n    }\n    /** The currently active item. */\n    getActiveItem() {\n        return this._activeItem;\n    }\n    /** Focus the first available item. */\n    _focusFirstItem() {\n        this.focusItem(this._findNextAvailableItemIndex(-1));\n    }\n    /** Focus the last available item. */\n    _focusLastItem() {\n        this.focusItem(this._findPreviousAvailableItemIndex(this._items.length));\n    }\n    /** Focus the next available item. */\n    _focusNextItem() {\n        this.focusItem(this._findNextAvailableItemIndex(this._activeItemIndex));\n    }\n    /** Focus the previous available item. */\n    _focusPreviousItem() {\n        this.focusItem(this._findPreviousAvailableItemIndex(this._activeItemIndex));\n    }\n    focusItem(itemOrIndex, options = {}) {\n        // Set default options\n        options.emitChangeEvent ??= true;\n        let index = typeof itemOrIndex === 'number'\n            ? itemOrIndex\n            : this._items.findIndex(item => this._trackByFn(item) === this._trackByFn(itemOrIndex));\n        if (index < 0 || index >= this._items.length) {\n            return;\n        }\n        const activeItem = this._items[index];\n        // If we're just setting the same item, don't re-call activate or focus\n        if (this._activeItem !== null &&\n            this._trackByFn(activeItem) === this._trackByFn(this._activeItem)) {\n            return;\n        }\n        const previousActiveItem = this._activeItem;\n        this._activeItem = activeItem ?? null;\n        this._activeItemIndex = index;\n        this._typeahead?.setCurrentSelectedItemIndex(index);\n        this._activeItem?.focus();\n        previousActiveItem?.unfocus();\n        if (options.emitChangeEvent) {\n            this.change.next(this._activeItem);\n        }\n        if (this._shouldActivationFollowFocus) {\n            this._activateCurrentItem();\n        }\n    }\n    _updateActiveItemIndex(newItems) {\n        const activeItem = this._activeItem;\n        if (!activeItem) {\n            return;\n        }\n        const newIndex = newItems.findIndex(item => this._trackByFn(item) === this._trackByFn(activeItem));\n        if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n            this._activeItemIndex = newIndex;\n            this._typeahead?.setCurrentSelectedItemIndex(newIndex);\n        }\n    }\n    _setTypeAhead(debounceInterval) {\n        this._typeahead = new Typeahead(this._items, {\n            debounceInterval: typeof debounceInterval === 'number' ? debounceInterval : undefined,\n            skipPredicate: item => this._skipPredicateFn(item),\n        });\n        this._typeaheadSubscription = this._typeahead.selectedItem.subscribe(item => {\n            this.focusItem(item);\n        });\n    }\n    _findNextAvailableItemIndex(startingIndex) {\n        for (let i = startingIndex + 1; i < this._items.length; i++) {\n            if (!this._skipPredicateFn(this._items[i])) {\n                return i;\n            }\n        }\n        return startingIndex;\n    }\n    _findPreviousAvailableItemIndex(startingIndex) {\n        for (let i = startingIndex - 1; i >= 0; i--) {\n            if (!this._skipPredicateFn(this._items[i])) {\n                return i;\n            }\n        }\n        return startingIndex;\n    }\n    /**\n     * If the item is already expanded, we collapse the item. Otherwise, we will focus the parent.\n     */\n    _collapseCurrentItem() {\n        if (!this._activeItem) {\n            return;\n        }\n        if (this._isCurrentItemExpanded()) {\n            this._activeItem.collapse();\n        }\n        else {\n            const parent = this._activeItem.getParent();\n            if (!parent || this._skipPredicateFn(parent)) {\n                return;\n            }\n            this.focusItem(parent);\n        }\n    }\n    /**\n     * If the item is already collapsed, we expand the item. Otherwise, we will focus the first child.\n     */\n    _expandCurrentItem() {\n        if (!this._activeItem) {\n            return;\n        }\n        if (!this._isCurrentItemExpanded()) {\n            this._activeItem.expand();\n        }\n        else {\n            coerceObservable(this._activeItem.getChildren())\n                .pipe(take(1))\n                .subscribe(children => {\n                const firstChild = children.find(child => !this._skipPredicateFn(child));\n                if (!firstChild) {\n                    return;\n                }\n                this.focusItem(firstChild);\n            });\n        }\n    }\n    _isCurrentItemExpanded() {\n        if (!this._activeItem) {\n            return false;\n        }\n        return typeof this._activeItem.isExpanded === 'boolean'\n            ? this._activeItem.isExpanded\n            : this._activeItem.isExpanded();\n    }\n    _isItemDisabled(item) {\n        return typeof item.isDisabled === 'boolean' ? item.isDisabled : item.isDisabled?.();\n    }\n    /** For all items that are the same level as the current item, we expand those items. */\n    _expandAllItemsAtCurrentItemLevel() {\n        if (!this._activeItem) {\n            return;\n        }\n        const parent = this._activeItem.getParent();\n        let itemsToExpand;\n        if (!parent) {\n            itemsToExpand = of(this._items.filter(item => item.getParent() === null));\n        }\n        else {\n            itemsToExpand = coerceObservable(parent.getChildren());\n        }\n        itemsToExpand.pipe(take(1)).subscribe(items => {\n            for (const item of items) {\n                item.expand();\n            }\n        });\n    }\n    _activateCurrentItem() {\n        this._activeItem?.activate();\n    }\n}\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction TREE_KEY_MANAGER_FACTORY() {\n    return (items, options) => new TreeKeyManager(items, options);\n}\n/** Injection token that determines the key manager to use. */\nconst TREE_KEY_MANAGER = new InjectionToken('tree-key-manager', {\n    providedIn: 'root',\n    factory: TREE_KEY_MANAGER_FACTORY,\n});\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst TREE_KEY_MANAGER_FACTORY_PROVIDER = {\n    provide: TREE_KEY_MANAGER,\n    useFactory: TREE_KEY_MANAGER_FACTORY,\n};\n\nexport { TREE_KEY_MANAGER, TREE_KEY_MANAGER_FACTORY, TREE_KEY_MANAGER_FACTORY_PROVIDER, TreeKeyManager };\n\n"],
  "mappings": "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",
  "names": ["import_rxjs", "import_rxjs", "import_operators"]
}
